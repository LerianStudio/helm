
# Default values for midaz components.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: "midaz"
fullnameOverride: ""
namespaceOverride: "midaz"

global:
  # -- Enable or disable loading of default RabbitMQ definitions to external host
  externalRabbitmqDefinitions:
    enabled: false

console:
  # -- Service name
  name: console

  # -- Enable or disable the console service
  enabled: true

  # -- Number of replicas for the deployment
  replicaCount: 1

  image:
    # -- Repository for the console service container image
    repository: lerianstudio/midaz-console
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Image tag used for deployment
    tag: "2.2.1"

  # -- Secrets for pulling images from a private registry
  imagePullSecrets: []

  # -- Overrides the default generated name by Helm
  nameOverride: ""
  # -- Overrides the full name generated by Helm
  fullnameOverride: ""

  # -- Annotations to be added to the Pod
  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext:
    # -- Defines the group ID for the user running the process inside the container
    runAsGroup: 1000
    # -- Defines the user ID for the process running inside the container
    runAsUser: 1000
    # -- Ensures the process does not run as root
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
    # -- Defines the root filesystem as read-only
    readOnlyRootFilesystem: true

  # -- PodDisruptionBudget configuration
  pdb:
    # -- Enable or disable PodDisruptionBudget
    enabled: false
    # -- Minimum number of available pods
    minAvailable: 1
    # -- Maximum number of unavailable pods
    maxUnavailable: 1
    # -- Annotations for the PodDisruptionBudget
    annotations: {}

  # -- Deployment update strategy
  deploymentUpdate:
    # -- Type of deployment strategy
    type: RollingUpdate
    # -- Maximum number of pods that can be created over the desired number of pods
    maxSurge: 100%
    # -- Maximum number of pods that can be unavailable during the update
    maxUnavailable: 0

  service:
    # -- Kubernetes service type
    type: ClusterIP
    # -- Service port
    port: 8081

  ingress:
    # -- Enable or disable ingress
    enabled: false
    # -- Ingress class name
    className: ""
    # -- Additional ingress annotations
    annotations: {}
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: Prefix
    # -- TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #  hosts:
    #      - chart-example.local
      
  resources:
    # -- CPU and memory limits for pods
    limits:
      cpu: 200m
      memory: 256Mi
    # -- Minimum CPU and memory requests
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling:
    # -- Enable or disable horizontal pod autoscaling
    enabled: true
    # -- Minimum number of replicas
    minReplicas: 1
    # -- Maximum number of replicas
    maxReplicas: 3
    # -- Target CPU utilization percentage for autoscaling
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # -- Node selector for scheduling pods on specific nodes
  nodeSelector: {}

   # -- Tolerations for scheduling on tainted nodes
  tolerations: {}

  # -- Affinity rules for pod scheduling
  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

   # -- ConfigMap for environment variables and configurations
   # @default -- templates/console/configmap.yaml
  configmap:
    # -- URL of the NextAuth service
    NEXTAUTH_URL: "http://localhost:8081" # If a custom DNS is configured for the console, this value must be updated accordingly.
    
    # -- The Auth Plugin is a centralized service that provides authentication and authorization capabilities for Lerian Studio's applications.
    # -- For more details, refer to the documentation:
    # -- https://docs.lerian.studio/docs/auth-identity#technical-specs
    # -- Default configuration for the Auth Plugin
    # -- This configuration is used to connect the console to the Auth and Identity Plugin
    PLUGIN_AUTH_ENABLED: "false"
    PLUGIN_AUTH_CLIENT_ID: "ac56c81d4d6d95c0ac12"
    PLUGIN_AUTH_HOST: "plugin-access-manager-auth"
    PLUGIN_AUTH_PORT: "4000"
    PLUGIN_AUTH_BASE_PATH: "http://plugin-access-manager-auth.midaz-plugins.svc.cluster.local.:4000/v1" 
    PLUGIN_IDENTITY_HOST:  "plugin-access-manager-identity.midaz-plugins.svc.cluster.local."  
    PLUGIN_IDENTITY_PORT: "4001"
    PLUGIN_IDENTITY_BASE_PATH: "http://plugin-access-manager-identity.midaz-plugins.svc.cluster.local.:4001/v1"
    MONGODB_URI: "mongodb://midaz-mongodb.midaz.svc.cluster.local:27017/?directConnection=true"
    MONGODB_DB_NAME: "midaz-console"
    MONGODB_USER: "midaz"
  
  # Plugins UIs
  pluginsUi:
    enabled: true
    plugin-smart-templates-frontend:
      enabled: true
      port: 8083

  # -- Secrets for storing sensitive data
  # @default -- templates/console/secrets.yaml
  secrets: 
    PLUGIN_AUTH_CLIENT_SECRET: "6add4bc64f394456a77fa85708ad8c9b67e39e4c"
    MONGODB_PASS: "lerian"


  serviceAccount:
    # -- Specifies whether a ServiceAccount should be created
    create: true
    # -- Annotations for the ServiceAccount
    annotations: {}
    # -- Name of the service account
    # @default -- `midaz-console.fullname`
    name: ""

onboarding:
  # -- Service name
  name: onboarding

  # -- Number of replicas for the onboarding service
  replicaCount: 2

  image:
    # -- Repository for the onboarding service container image
    repository: lerianstudio/midaz-onboarding
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Image tag used for deployment
    tag: "2.2.2"

  # -- Secrets for pulling images from a private registry
  imagePullSecrets: []

  # -- Overrides the default generated name by Helm
  nameOverride: ""
  # -- Overrides the full name generated by Helm
  fullnameOverride: ""

  # -- Pod annotations for additional metadata
  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext:
    # -- Defines the group ID for the user running the process inside the container
    runAsGroup: 1000
    # -- Defines the user ID for the process running inside the container
    runAsUser: 1000
    # -- Ensures the process does not run as root
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
    # -- Defines the root filesystem as read-only
    readOnlyRootFilesystem: true
  
  # -- PodDisruptionBudget configuration
  pdb:
    # -- Enable or disable PodDisruptionBudget
    enabled: true
    # -- Minimum number of available pods
    minAvailable: 1
    # -- Maximum number of unavailable pods
    maxUnavailable: 1
    # -- Annotations for the PodDisruptionBudget
    annotations: {}
  
  # -- Deployment update strategy
  deploymentUpdate:
    # -- Type of deployment strategy
    type: RollingUpdate
    # -- Maximum number of pods that can be created over the desired number of pods
    maxSurge: 100%
    # -- Maximum number of pods that can be unavailable during the update
    maxUnavailable: 0

  service:
    # -- Kubernetes service type
    type: ClusterIP
    # -- Port for the HTTP API
    port: 3000

  ingress:
    # -- Enable or disable ingress
    enabled: false
    # -- Ingress class name
    className: ""
    # -- Additional ingress annotations
    annotations: {}
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: Prefix
    # -- TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #  hosts:
    #      - chart-example.local

  resources:
    # -- CPU and memory limits for pods
    limits:
      cpu: 1500m
      memory: 512Mi
    # -- Minimum CPU and memory requests
    requests:
      cpu: 1500m
      memory: 512Mi

  autoscaling:
    # -- Enable or disable horizontal pod autoscaling
    enabled: true
    # -- Minimum number of replicas
    minReplicas: 2
    # -- Maximum number of replicas
    maxReplicas: 5
    # -- Target CPU utilization percentage for autoscaling
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # -- Node selector for scheduling pods on specific nodes
  nodeSelector: {}

  # -- Tolerations for scheduling on tainted nodes
  tolerations: {}

  # -- Affinity rules for pod scheduling
  affinity: {}
    # -- Node affinity rules
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

  # -- ConfigMap for environment variables and configurations
  # @default -- templates/onboarding/configmap.yaml
  configmap: 
    # -- Rabbitmq default configuration
    RABBITMQ_PROTOCOL: "http"
    RABBITMQ_URI: "amqp"
    RABBITMQ_HOST: "midaz-rabbitmq.midaz.svc.cluster.local."
    RABBITMQ_PORT_HOST: "5672"
    RABBITMQ_PORT_AMQP: "15672" 
    RABBITMQ_DEFAULT_USER: "onboarding"
    # -- MongoDB default configuration
    MONGO_URI: "mongodb"
    MONGO_HOST: "midaz-mongodb.midaz.svc.cluster.local."
    MONGO_NAME: "onboarding"
    MONGO_USER: "midaz"
    MONGO_PORT: "27017"
    # -- Redis default configuration
    REDIS_HOST: "midaz-valkey-primary.midaz.svc.cluster.local."
    REDIS_PORT: "6379"
    REDIS_USER: "midaz"
    # -- PostgreSQL default configuration
    DB_HOST: "midaz-postgresql-primary.midaz.svc.cluster.local."
    DB_USER: "midaz"
    DB_NAME: "onboarding"
    DB_PORT: "5432"
    # -- PostgreSQL replication default configuration
    DB_REPLICA_HOST: "midaz-postgresql-replication.midaz.svc.cluster.local."
    DB_REPLICA_USER: "midaz"
    DB_REPLICA_NAME: "onboarding"
    DB_REPLICA_PORT: "5432"
    # -- The Auth Plugin is a centralized service that provides authentication and authorization capabilities for Lerian Studio's applications.
    # -- For more details, refer to the documentation:
    # -- https://docs.lerian.studio/docs/auth-identity#technical-specs
    # -- Default configuration for the Auth Plugin
    # -- This configuration is used to connect the onboarding to the Auth Plugin
    PLUGIN_AUTH_ENABLED: "false"
    PLUGIN_AUTH_HOST: "http://plugin-access-manager-auth.midaz-plugins.svc.cluster.local.:4000"

  # -- Secrets for storing sensitive data
  # @default -- templates/onboarding/secrets.yaml
  secrets: 
    # -- MongoDB default password
    MONGO_PASSWORD: "lerian"
    # -- PostgreSQL default password
    DB_PASSWORD: "lerian"
    # -- PostgreSQL replication default password
    DB_REPLICA_PASSWORD: "lerian"
    # -- RabbitMQ default password
    RABBITMQ_DEFAULT_PASS: "lerian"
    # -- Redis default password
    REDIS_PASSWORD: "lerian"

  serviceAccount:
    # -- Specifies whether a ServiceAccount should be created
    create: true
    # -- Annotations for the ServiceAccount
    annotations: {}
    # -- Name of the service account
    # @default -- `midaz-onboarding.fullname`
    name: ""

transaction:
  # -- Service name
  name: transaction

  # -- Number of replicas for the transaction service
  replicaCount: 1

  image:
    # -- Repository for the transaction service container image
    repository: lerianstudio/midaz-transaction
    # -- Image pull policy
    pullPolicy: IfNotPresent
    # -- Image tag used for deployment
    tag: "2.2.2"

  # -- Secrets for pulling images from a private registry
  imagePullSecrets: []

  # -- Overrides the default generated name by Helm
  nameOverride: ""
  # -- Overrides the full name generated by Helm
  fullnameOverride: ""

  # -- Pod annotations for additional metadata
  podAnnotations: {}

  podSecurityContext: {}
  # fsGroup: 2000

  securityContext:
    # -- Defines the group ID for the user running the process inside the container
    runAsGroup: 1000
    # -- Defines the user ID for the process running inside the container
    runAsUser: 1000
    # -- Ensures the process does not run as root
    runAsNonRoot: true
    capabilities:
      drop:
        - ALL
    # -- Defines the root filesystem as read-only
    readOnlyRootFilesystem: true

  # -- PodDisruptionBudget configuration
  pdb:
    # -- Enable or disable PodDisruptionBudget
    enabled: true
    # -- Minimum number of available pods
    minAvailable: 2
    # -- Maximum number of unavailable pods
    maxUnavailable: 1
    # -- Annotations for the PodDisruptionBudget
    annotations: {}

  # -- Deployment update strategy
  deploymentUpdate:
    # -- Type of deployment strategy
    type: RollingUpdate
    # -- Maximum number of pods that can be created over the desired number of pods
    maxSurge: 100%
    # -- Maximum number of pods that can be unavailable during the update
    maxUnavailable: 0
  
  service:
    # -- Kubernetes service type
    type: ClusterIP
    # -- Port for the HTTP API
    port: 3001

  ingress:
    # -- Enable or disable ingress
    enabled: false
    # -- Ingress class name
    className: ""
    # -- Additional ingress annotations
    annotations: {}
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: Prefix
    # -- TLS configuration for ingress
    tls: []
    #  - secretName: chart-example-tls
    #  hosts:
    #      - chart-example.local

  resources:
    # -- CPU and memory limits for pods
    limits:
      cpu: 2000m
      memory: 512Mi
    # -- Minimum CPU and memory requests
    requests:
      cpu: 2000m
      memory: 512Mi

  autoscaling:
    # -- Enable or disable horizontal pod autoscaling
    enabled: true
    # -- Minimum number of replicas
    minReplicas: 3
    # -- Maximum number of replicas
    maxReplicas: 9
    # -- Target CPU utilization percentage for autoscaling
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  # -- Node selector for scheduling pods on specific nodes
  nodeSelector: {}

  # -- Tolerations for scheduling on tainted nodes
  tolerations: {}

  # -- Affinity rules for pod scheduling
  affinity: {}
    # -- Node affinity rules
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

  # -- ConfigMap for environment variables and configurations
  # @default -- templates/transaction/configmap.yaml
  configmap: 
    # -- Rabbitmq default configuration
    RABBITMQ_PROTOCOL: "http"
    RABBITMQ_URI: "amqp"
    RABBITMQ_HOST: "midaz-rabbitmq.midaz.svc.cluster.local."
    RABBITMQ_PORT_HOST: "5672"
    RABBITMQ_PORT_AMQP: "15672" 
    RABBITMQ_DEFAULT_USER: "transaction"
    # -- MongoDB default configuration
    MONGO_URI: "mongodb"
    MONGO_HOST: "midaz-mongodb.midaz.svc.cluster.local."
    MONGO_NAME: "transaction"
    MONGO_USER: "midaz"
    MONGO_PORT: "27017"
    # -- Redis default configuration
    REDIS_HOST: "midaz-valkey-primary.midaz.svc.cluster.local."
    REDIS_PORT: "6379"
    REDIS_USER: "midaz"
    # -- PostgreSQL default configuration
    DB_HOST: "midaz-postgresql-primary.midaz.svc.cluster.local."
    DB_USER: "midaz"
    DB_NAME: "transaction"
    DB_PORT: "5432"
    # -- PostgreSQL replication default configuration
    DB_REPLICA_HOST: "midaz-postgresql-replication.midaz.svc.cluster.local."
    DB_REPLICA_USER: "midaz"
    DB_REPLICA_NAME: "transaction"
    DB_REPLICA_PORT: "5432"
    # -- The Auth Plugin is a centralized service that provides authentication and authorization capabilities for Lerian Studio's applications.
    # -- For more details, refer to the documentation:
    # -- https://docs.lerian.studio/docs/auth-identity#technical-specs
    # -- Default configuration for the Auth Plugin
    # -- This configuration is used to connect the transaction to the Auth Plugin
    PLUGIN_AUTH_ENABLED: "false"
    PLUGIN_AUTH_HOST: "http://plugin-access-manager-auth.midaz-plugins.svc.cluster.local.:4000"

  # -- Secrets for storing sensitive data
  # @default -- templates/transaction/secrets.yaml
  secrets: 
    # -- MongoDB default password
    MONGO_PASSWORD: "lerian"
    # -- PostgreSQL default password
    DB_PASSWORD: "lerian"
    # -- PostgreSQL replication default password
    DB_REPLICA_PASSWORD: "lerian"
    # -- RabbitMQ default password
    RABBITMQ_DEFAULT_PASS: "lerian"
    # -- Redis default password
    REDIS_PASSWORD: "lerian"

  serviceAccount:
    # -- Specifies whether a ServiceAccount should be created
    create: true
    # -- Annotations for the ServiceAccount
    annotations: {}
    # -- Name of the service account
    # @default -- `midaz-transaction.fullname`
    name: ""

grafana:
  # OpenTelemetry (OTel) dependency for observability.
  # This component is responsible for collecting and exporting telemetry data
  # such as traces and metrics, enhancing the monitoring of the application.
  # For more details, refer to the documentation:
  # https://docs.lerian.studio/docs/observability-in-midaz#midaz-observability-stack
  enabled: false

  name: grafana

  # -- Configure the ingress for Access Grafana Dashboard
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #  hosts:
    #      - chart-example.local
  
valkey:
  # Valkey is used to handle scenarios where real-time performance and fast data retrieval are essential.
  # This component is responsible for providing an in-memory data store
  enabled: true

  external: false
  architecture: standalone

  auth:
    enabled: true
    password: lerian
    username: midaz
  
  primary:
    kind: Deployment
    resourcesPreset: "medium"
    
    persistence:
      enabled: false
    
    extraFlags:
      - "--maxmemory 640mb"              # Controls the memory usage limit to prevent OOM (never leave this unset).
      - "--maxmemory-policy allkeys-lru" # Eviction policy when memory limit is reached (LRU works well for caching). Smart eviction strategy for rotating cache.
      - "--hz 100"                       # Improves responsiveness of internal events and increases the frequency of internal tasks such as memory cleanup, key expiration checks, etc.
      - "--maxclients 10000"             # Supports a large number of simultaneous connections

postgresql:
  # PostgreSQL is the backbone of Midaz for managing structured data that demands transactional reliability and consistency.
  # This component is responsible for providing a robust relational database
  # For more details, refer to the documentation:
  # https://docs.lerian.studio/docs/midaz-components#why-postgresql
  enabled: true

  external: false
  architecture: replication
  replication:
    numSynchronousReplicas: 1
  auth:
    enabled: true
    enablePostgresUser: false
    username: "midaz"
    password: "lerian"
    database: "onboarding"
    replicationUsername: "replicator"
    replicationPassword: "replicator_password"

  primary:
    extraVolumes:
    - name: init-script
      configMap:
        name: midaz-init-sql
        items:
          - key: init.sql
            path: init.sql
    extraVolumeMounts:
    - name: init-script
      mountPath: /docker-entrypoint-initdb.d/init.sql
      subPath: init.sql
    
    persistence:
      size: 8Gi
    
    resourcesPreset: large

    extendedConfiguration: |
      shared_buffers = 2GB
      max_wal_senders = 20
      wal_keep_size = 512MB
      max_replication_slots = 20

    extraEnvVars:
      - name: POSTGRESQL_WAL_LEVEL
        value: "logical"
      - name: POSTGRESQL_HOST_STANDBY
        value: "on"
      - name: POSTGRESQL_MAX_CONNECTIONS
        value: "500"
      - name: POSTGRESQL_TCP_KEEPALIVES_IDLE
        value: "30"
      - name: POSTGRESQL_TCP_KEEPALIVES_INTERVAL
        value: "10"
      - name: POSTGRESQL_TCP_KEEPALIVES_COUNT
        value: "5"    

  readReplicas:
    name: replication
    replicaCount: 1
    persistence:
      size: 8Gi
  
    resourcesPreset: large

    extendedConfiguration: |
      shared_buffers = 2GB
      max_wal_senders = 20
      max_replication_slots = 20
      wal_keep_size = 512MB

    extraEnvVars:
      - name: POSTGRESQL_WAL_LEVEL
        value: "logical"
      - name: POSTGRESQL_HOST_STANDBY
        value: "on"
      - name: POSTGRESQL_MAX_CONNECTIONS
        value: "500"
      - name: POSTGRESQL_TCP_KEEPALIVES_IDLE
        value: "40"
      - name: POSTGRESQL_TCP_KEEPALIVES_INTERVAL
        value: "10"
      - name: POSTGRESQL_TCP_KEEPALIVES_COUNT
        value: "5"  

mongodb:
  # MongoDB’s flexibility and scalability make it the perfect choice for managing evolving and less structured data.
  enabled: true

  external: false
  auth:
    enabled: true
    rootUser: midaz
    rootPassword: "lerian"
  
  resourcesPreset: "medium"

  persistence:
    size: 8Gi

rabbitmq:
  # RabbitMQ dependency for message brokering.
  # This component is responsible for providing a message queue system
  # to enable communication between different parts of the application.
  enabled: true

  external: false
  image:
    debug: true
  auth:
    enabled: true
    username: "midaz"
    password: "lerian"
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    load_definitions = /app/load_definition.json
  
  persistence:
    size: 8Gi

  resourcesPreset: "medium"
  
  persistence:
    size: 8Gi

otel-collector-lerian:
  enabled: false

  # Adds the client ID for multi-tenancy, as requested.
  resource/add_client_id:
    attributes:
      - key: client.id
        value: "Lerian"
        action: upsert

  extraEnvs:
  - name: OTEL_API_KEY
    valueFrom:
      secretKeyRef:
        name: otel-api-key
        key: api-key

  exporters:
    otlphttp/server:
      endpoint: "https://telemetry.lerian.io:443" # Send traces to Lerian Telemetry
      headers:
        x-api-key: "${OTEL_API_KEY}"

    prometheus/local: # Expose metrics for Client Prometheus
      endpoint: 0.0.0.0:8889