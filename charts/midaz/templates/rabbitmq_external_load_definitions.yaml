{{- if .Values.global.externalRabbitmqDefinitions.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: midaz-external-rabbitmq-definitions
  namespace: {{ .Release.Namespace }}
data:
  load_definitions.json: |
{{ .Files.Get "files/rabbitmq/load_definitions.json" | indent 4 }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: midaz-rabbitmq-apply-definitions
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install
spec:
  template:
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-dependencies
          image: busybox
          envFrom:
          - configMapRef:
              name: {{ include "midaz-onboarding.fullname" . }}
          command:
            - /bin/sh
            - -c
            - >
              for svc in "$RABBITMQ_HOST:$RABBITMQ_PORT_HOST";
              do
                echo "Checking $svc...";
                while ! nc -z $(echo $svc | cut -d: -f1) $(echo $svc | cut -d: -f2); do
                  echo "$svc is not ready yet, waiting...";
                  sleep 5;
                done;
                echo "$svc is ready!";
              done;
      containers:
        - name: apply-definitions
          image: curlimages/curl:8.7.1
          command:
            - sh
            - -c
            - |
              echo "Applying RabbitMQ definitions from file"
              curl -sf -u "$RABBITMQ_ADMIN_USER:$RABBITMQ_ADMIN_PASS" \
                -H "content-type: application/json" \
                -X POST \
                --data-binary @/definitions/load_definitions.json \
                "$RABBITMQ_PROTOCOL://$RABBITMQ_HOST/api/definitions"

              echo "Updating RabbitMQ user: onboarding"
              curl -sf -u "$RABBITMQ_ADMIN_USER:$RABBITMQ_ADMIN_PASS" \
                -H "content-type: application/json" \
                -X PUT \
                --data "{\"password\":\"$RABBITMQ_ONBOARDING_PASS\",\"tags\":\"administrator\"}" \
                "$RABBITMQ_PROTOCOL://$RABBITMQ_HOST/api/users/onboarding"

              echo "Updating RabbitMQ user: transaction"
              curl -sf -u "$RABBITMQ_ADMIN_USER:$RABBITMQ_ADMIN_PASS" \
                -H "content-type: application/json" \
                -X PUT \
                --data "{\"password\":\"$RABBITMQ_TRANSACTION_PASS\",\"tags\":\"administrator\"}" \
                "$RABBITMQ_PROTOCOL://$RABBITMQ_HOST/api/users/transaction"

              echo "RabbitMQ definitions applied successfully."
          env:
            - name: RABBITMQ_PROTOCOL
              value: {{ .Values.onboarding.configmap.RABBITMQ_PROTOCOL | quote }}
            - name: RABBITMQ_HOST
              value: {{ .Values.onboarding.configmap.RABBITMQ_HOST | quote }}
            - name: RABBITMQ_PORT
              value: {{ .Values.onboarding.configmap.RABBITMQ_PORT_AMQP | quote }}
            - name: RABBITMQ_ONBOARDING_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "midaz-onboarding.fullname" . }}
                  key: RABBITMQ_DEFAULT_PASS
            - name: RABBITMQ_TRANSACTION_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "midaz-transaction.fullname" . }}
                  key: RABBITMQ_DEFAULT_PASS
            - name: RABBITMQ_ADMIN_PASS
              {{- if .Values.global.externalRabbitmqDefinitions.rabbitmqAdminLogin.useExistingSecret.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.externalRabbitmqDefinitions.rabbitmqAdminLogin.useExistingSecret.name }}
                  key: RABBITMQ_ADMIN_PASS
              {{- else }}
              value: {{ .Values.global.externalRabbitmqDefinitions.rabbitmqAdminLogin.password | quote }}
              {{- end }}
            - name: RABBITMQ_ADMIN_USER
              {{- if .Values.global.externalRabbitmqDefinitions.rabbitmqAdminLogin.useExistingSecret.name }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.externalRabbitmqDefinitions.rabbitmqAdminLogin.useExistingSecret.name }}
                  key: RABBITMQ_ADMIN_USER
              {{- else }}
              value: {{ .Values.global.externalRabbitmqDefinitions.rabbitmqAdminLogin.username | quote }}
              {{- end }}
          volumeMounts:
            - name: definitions
              mountPath: /definitions
      volumes:
        - name: definitions
          configMap:
            name: midaz-external-rabbitmq-definitions
            items:
              - key: load_definitions.json
                path: load_definitions.json
{{- end }}