# Default values for midaz-ledger.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
nameOverride: "midaz"
fullnameOverride: ""

console:
  name: console
  replicaCount: 1

  image:
    repository: lerianstudio/midaz-console
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.2.0"

  podAnnotations: {}

  service:
    type: ClusterIP
    port: 8081

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #  hosts:
    #      - chart-example.local

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: {}

  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

  configmap: {}

  secrets: {}

  serviceAccount:
  # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

ledger:
  name: ledger
  replicaCount: 2

  image:
    repository: lerianstudio/midaz-ledger
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 3000

  ingress:
    enabled: false
    className: "alb"
    annotations:
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/group.name: services-alb
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/target-type: instance
      alb.ingress.kubernetes.io/healthcheck-path: "/health"
    hosts:
      - host: midaz-open-source.private.gen-int-dev.midaz.io
        paths:
          - path: /
            pathType: Prefix
    tls: []
    #  - secretName: chart-example-tls
    #  hosts:
    #      - chart-example.local

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: {}

  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

  configmap: {}

  secrets: {}

  serviceAccount:
  # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

audit:
  name: audit
  replicaCount: 1

  image:
    repository: lerianstudio/midaz-audit
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.44.0"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 3005

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  server:
    image: 
      repository: gcr.io/trillian-opensource-ci/log_server
    service:
      httpPort: 8091
      grpcPort: 8090
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi
  
  signer:
    image: 
      repository: gcr.io/trillian-opensource-ci/log_signer
    service:
      httpPort: 8092
      grpcPort: 8093
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: {}

  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

  configmap: {}

  secrets: {}

  serviceAccount:
  # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

transaction:
  name: transaction
  replicaCount: 1

  image:
    repository: lerianstudio/midaz-transaction
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.44.0"

  podAnnotations: {}

  service:
    type: ClusterIP
    port: 3002

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: ""
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

  nodeSelector: {}

  tolerations: {}

  affinity: {}
    # nodeAffinity:
    #   requiredDuringSchedulingIgnoredDuringExecution:
    #     nodeSelectorTerms:
    #     - matchExpressions:
    #       - key: midaz.io/owner
    #         operator: In
    #         values:
    #         - midaz

  configmap: {}

  secrets: {}

  serviceAccount:
  # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

redis:
  external: false
  architecture: standalone
  auth:
    enabled: false

postgresql:
  external: false
  auth:
    enabled: true
    enablePostgresUser: false
    username: "midaz"
    password: "lerian"
    database: "ledger"
  primary:
    extraVolumes:
    - name: init-script
      configMap:
        name: midaz-init-sql
        items:
          - key: init.sql
            path: init.sql
    extraVolumeMounts:
    - name: init-script
      mountPath: /docker-entrypoint-initdb.d/init.sql
      subPath: init.sql

mongodb: 
  external: false
  auth:
    enabled: true
    rootUser: midaz
    rootPassword: "lerian"

rabbitmq:
  external: false
  image:
    debug: true
  auth:
    enabled: true
    username: "midaz"
    password: "lerian"
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    load_definitions = /app/load_definition.json
  
casdoor:
  enabled: true

  config: |
    appname=midaz-casdoor
    rundmode=dev
    httpport=8000
    SessionOn=true
    copyrequestbody = true
    driverName=postgres
    dataSourceName="user=midaz password=lerian host=midaz-casdoordb.midaz-open-source.svc.cluster.local port=5432 sslmode=disable dbname=casdoor"
    redisEndpoint=
    dbName=casdoor
    showSql=false
    authState="casdoor"
    verificationCodeTimeout=10
    logPostOnly=true
    isUsernameLowered=false
    origin=
    batchSize=100
    enableErrorMask=false
    enableGzip=true
    quota={"organization": -1, "user": -1, "application": -1, "provider": -1}
    logConfig={"filename": "logs/casdoor.log", "maxdays":99999, "perm":"0770"}
    initDataFile="./init_data.json"
    defaultStorageProvider=
    isCloudIntranet=false
    socks5Proxy=""
    initScore=0
    ldapServerPort=10389

  database:
    driver: postgres

  resources: 
    limits:
      cpu: 256m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 1Gi 

  extraVolumeMounts:
    - name: casdoor-init-data-volume
      mountPath: /init_data.json
      subPath: init_data.json

  extraVolumes:
    - name: casdoor-init-data-volume
      configMap:
        defaultMode: 420
        name: casdoor-init-config
        items:
          - key: init_data.json
            path: init_data.json

casdoordb:
  external: false
  auth:
    enabled: true
    enablePostgresUser: false
    username: "midaz"
    password: "lerian"
    database: "casdoor"
  primary:
    extraVolumes:
    - name: init-script-volume
      configMap:
        name: casdoor-init-script
        items:
          - key: 00_init.sql
            path: 00_init.sql
    extraVolumeMounts:
    - name: init-script-volume
      mountPath: /docker-entrypoint-initdb.d/00_init.sql
      subPath: 00_init.sql

mariadb:
  auth:
    enabled: true
    username: midaz
    rootPassword: "lerian"
    password: "lerian"
    database: "audit-db"
  primary:
    extraVolumes:
    - name: init-sql-volume
      configMap:
        name: mariadb-init-sql
        items:
          - key: init.sql
            path: init.sql
    extraVolumeMounts:
    - name: init-sql-volume
      mountPath: /docker-entrypoint-initdb.d/init.sql
      subPath: init.sql